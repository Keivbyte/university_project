.586
; Плоская модель памяти 
.MODEL FLAT, stdcall
WM_DESTROY equ 2
WM_CREATE equ 1
WM_LBUTTONDOWN equ 201H
CS_VREDRAW equ 1h
CS_HREDRAW equ 2h
CS_GLOBALCLASS equ 4000h
WS_OVERLAPPEDWINDOW equ 000CF0000H
WS_POPUP equ 80000000h
WS_CHILD equ 40000000h
STYLE equ CS_HREDRAW+CS_VREDRAW+CS_GLOBALCLASS
BS_DEFPUSHBUTTON equ 1h
WS_VISIBLE equ 10000000h
WS_CHILD equ 40000000h
STYLBTN equ WS_CHILD + BS_DEFPUSHBUTTON + WS_VISIBLE
;
IDI_APPLICATION equ 32512
;
IDC_ARROW equ 32512
;
SW_SHOWNORMAL equ 1
;
EXTERN MessageBoxA@16:NEAR
EXTERN CreateWindowExA@48:NEAR
EXTERN DefWindowProcA@16:NEAR
EXTERN DispatchMessageA@4:NEAR
EXTERN ExitProcess@4:NEAR
EXTERN GetMessageA@16:NEAR
EXTERN GetModuleHandleA@4:NEAR
EXTERN LoadCursorA@8:NEAR
EXTERN LoadIconA@8:NEAR
EXTERN PostQuitMessage@4:NEAR
EXTERN RegisterClassA@4:NEAR
EXTERN ShowWindow@8:NEAR
EXTERN TranslateMessage@4:NEAR
EXTERN UpdateWindow@4:NEAR
; ;
MSGSTRUCT STRUC
MSHWND DD ?
MSMESSAGE DD ?
MSWPARAM DD ?
MSLPARAM DD ?
MSTIME DD ?
MSPT DD ?
MSGSTRUCT ENDS
WNDCLASS STRUC
CSLSTYLE DD ?
CLWNDPROC DD ?
CLSBCLSEX DD ?
CLSBWNDEX DD ?
CLSHINST DD ?
CLSHICON DD ?
CLSHCURSOR DD ?
CLBKGROUND DD ?
CLMENNAME DD ?
CLNAME DD ?
WNDCLASS ENDS
; --------------------------------------
includelib d:\masm32\lib\user32.lib
includelib d:\masm32\lib\kernel32.lib
; --------------------------------------
_DATA SEGMENT
NEWHWND DD 0
MSG MSGSTRUCT <?>
WC WNDCLASS <?>
HINST DD 0
TITLENAME DB 'dochernoe and own window',0
TITLENAMED DB 'dochernoe window', 0
TITLENAME0 DB 'Own window', 0
CLASSNAME DB 'CLASS32', 0
CLASSNAMED DB 'CLASS321', 0
CLASSNAME0 DB 'CLASS322', 0
_DATA ENDS
_TEXT SEGMENT
START:
PUSH 0
CALL GetModuleHandleA@4
MOV [HINST], EAX
REG_CLASS:
MOV [WC.CSLSTYLE], STYLE
MOV [WC.CLWNDPROC], OFFSET WNDPROC
MOV [WC.CLSBCLSEX], 0
MOV [WC.CLSBWNDEX], 0
MOV EAX, [HINST]
MOV [WC.CLSHINST], EAX
PUSH IDI_APPLICATION
PUSH 0
CALL LoadIconA@8
MOV [WC.CLSHICON], EAX
PUSH IDC_ARROW
PUSH 0
CALL LoadCursorA@8
MOV [WC.CLSHCURSOR], EAX
MOV [WC.CLBKGROUND], 17  
MOV DWORD PTR [WC.CLMENNAME], 0
MOV DWORD PTR [WC.CLNAME], OFFSET CLASSNAME
PUSH OFFSET WC
CALL RegisterClassA@4
; ??????????? ?????? ???????? ????
MOV [WC.CSLSTYLE], STYLE
MOV [WC.CLWNDPROC], OFFSET WNDPROCD
MOV [WC.CLSBCLSEX], 0
MOV [WC.CLSBWNDEX], 0
MOV EAX, [HINST]
MOV [WC.CLSHINST], EAX
;------
MOV [WC.CLBKGROUND], 2  
MOV DWORD PTR [WC.CLMENNAME], 0
MOV DWORD PTR [WC.CLNAME], OFFSET CLASSNAMED
PUSH OFFSET WC
CALL RegisterClassA@4
; ??????????? ?????? ??????????? ????
MOV [WC.CSLSTYLE], STYLE
MOV [WC.CLWNDPROC], OFFSET WNDPROC
MOV [WC.CLSBCLSEX], 0
MOV [WC.CLSBWNDEX], 0
MOV EAX, [HINST]
MOV [WC.CLSHINST], EAX
;----------
MOV [WC.CLBKGROUND], 1  
MOV DWORD PTR [WC.CLMENNAME], 0
MOV DWORD PTR [WC.CLNAME], OFFSET CLASSNAMED
PUSH OFFSET WC
CALL RegisterClassA@4
; ???????? ????
PUSH 0
PUSH [HINST]
PUSH 0
PUSH 0
PUSH 400
PUSH 600
PUSH 100
PUSH 100
PUSH WS_OVERLAPPEDWINDOW
PUSH OFFSET TITLENAME
PUSH OFFSET CLASSNAME
PUSH 0
CALL CreateWindowExA@48
CMP EAX, 0
JZ _ERR
MOV [NEWHWND], EAX
PUSH SW_SHOWNORMAL
PUSH [NEWHWND]
CALL ShowWindow@8
PUSH [NEWHWND]
CALL UpdateWindow@4
MSG_LOOP:
PUSH 0
PUSH 0
PUSH 0
PUSH OFFSET MSG
CALL GetMessageA@16
CMP EAX, 0
JE END_LOOP
PUSH OFFSET MSG
CALL TranslateMessage@4
PUSH OFFSET MSG
CALL DispatchMessageA@4
JMP MSG_LOOP
END_LOOP:
PUSH [MSG.MSWPARAM]
CALL ExitProcess@4
_ERR:
JMP END_LOOP
;**********************************
WNDPROC PROC
PUSH EBP
MOV EBP,ESP
PUSH EBX
PUSH ESI
PUSH EDI
CMP DWORD PTR [EBP+0CH], WM_DESTROY
JE WMDESTROY
CMP DWORD PTR [EBP+0CH], WM_CREATE
JE WMCREATE
CMP DWORD PTR [EBP+0CH], WM_LBUTTONDOWN
JE LB
JMP DEFWNDPROC
WMCREATE:
MOV EAX,0
JMP FINISH
LB:
PUSH 0
PUSH [HINST]
PUSH 0
PUSH DWORD PTR [EBP+08H]
PUSH 200
PUSH 200
PUSH 50
PUSH 50
PUSH WS_CHILD OR WS_VISIBLE OR WS_OVERLAPPEDWINDOW
PUSH OFFSET TITLENAMED
PUSH OFFSET CLASSNAMED
PUSH 0
CALL CreateWindowExA@48
PUSH 0
PUSH [HINST]
PUSH 0
PUSH DWORD PTR [EBP+08H]
PUSH 200
PUSH 200
PUSH 150
PUSH 250
PUSH WS_POPUP OR WS_VISIBLE OR WS_OVERLAPPEDWINDOW
PUSH OFFSET TITLENAME0
PUSH OFFSET CLASSNAME0
PUSH 0
CALL CreateWindowExA@48
MOV EAX, 0
JMP FINISH
DEFWNDPROC:
PUSH DWORD PTR [EBP+14H]
PUSH DWORD PTR [EBP+10H]
PUSH DWORD PTR [EBP+0CH]
PUSH DWORD PTR [EBP+08H]
CALL DefWindowProcA@16
JMP FINISH
WMDESTROY:
PUSH 0
CALL PostQuitMessage@4
MOV EAX, 0
FINISH:
POP EDI
POP ESI
POP EBX
POP EBP
RET 16
WNDPROC ENDP
;***************
WNDPROCD PROC
PUSH EBP
MOV EBP, ESP
PUSH EBX
PUSH ESI
PUSH EDI
CMP DWORD PTR [EBP+0CH], WM_DESTROY
JE WMDESTROY
CMP DWORD PTR [EBP+0CH], WM_CREATE
JE WMCREATE
JMP DEFWNDPROC
WMCREATE:
MOV EAX,0
JMP FINISH
DEFWNDPROC:
PUSH DWORD PTR [EBP+14H]
PUSH DWORD PTR [EBP+10H]
PUSH DWORD PTR [EBP+0CH]
PUSH DWORD PTR [EBP+08H]
CALL DefWindowProcA@16
JMP FINISH
WMDESTROY:
MOV EAX,0
FINISH:
POP EDI
POP ESI
POP EBX
POP EBP
RET 16
WNDPROCD ENDP
;************************
WNDPROCO PROC
PUSH EBP
MOV EBP, ESP
PUSH EBX
PUSH ESI
PUSH EDI
CMP DWORD PTR [EBP+0CH], WM_DESTROY
JE WMDESTROY
CMP DWORD PTR [EBP+0CH], WM_CREATE
JE WMCREATE
JMP DEFWNDPROC
WMCREATE:
MOV EAX,0
JMP FINISH
DEFWNDPROC:
PUSH DWORD PTR [EBP+14H]
PUSH DWORD PTR [EBP+10H]
PUSH DWORD PTR [EBP+0CH]
PUSH DWORD PTR [EBP+08H]
CALL DefWindowProcA@16
JMP FINISH
WMDESTROY:
MOV EAX,0
FINISH:
POP EDI
POP ESI
POP EBX
POP EBP
RET 16
WNDPROCO ENDP
_TEXT ENDS
END START