;изменения в коде в попытке исправить ситуации 
;константу BUF DB 30 dup(0) увеличил до 256 в ожидая что не хватает места в буфере
;изменил цикл _ADD в функцие WNDPROC PROC исключая решистр ECX и оператор LOOP 
; программа аварийно завершается необрабатывая исключение 

.586P
.MODEL FLAT, stdcall
WM_SETFOCUS equ 7h
WM_DESTROY equ 2
WM_CREATE equ 1
;сообщение
WM_COMMAND equ 111h
WM_SETTEXT equ 0Ch
WM_GETTEXT equ 0Dh
LB_ADDSTRING equ 180h
LB_GETTEXT equ 189h
LB_GETCURSEL equ 188h
LBN_DBLCLK equ 2
; свойства окна
CS_VREDRAW equ 1h
CS_HREDRAW equ 2h
CS_GLOBALCLASS equ 4000h
WS_TABSTOP equ 10000h
WS_SYSMENU equ 80000h
WS_THICKFRAME equ 40000h
WS_OVERLAPPEDWINDOW equ WS_TABSTOP + WS_SYSMENU
STYLE equ CS_HREDRAW+CS_VREDRAW+CS_GLOBALCLASS
CS_HREDRAW equ 2h
BS_DEFPUSHBUTTON equ 1
WS_VISIBLE equ 10000000h
WS_CHILD equ 40000000h
WS_BORDER equ 800000h
WS_VSCROLL equ 200000h
LBS_NOTIFY equ 1h
STYLBTN equ WS_CHILD + BS_DEFPUSHBUTTON + WS_VISIBLE + WS_TABSTOP
STYLLST equ WS_THICKFRAME + WS_CHILD + WS_VISIBLE + WS_BORDER + WS_TABSTOP + WS_VSCROLL + LBS_NOTIFY
STYLEDT equ WS_CHILD + WS_VISIBLE + WS_BORDER + WS_TABSTOP
IDI_APPLICATION equ 32512
IDC_ARROW equ 32512
SW_SHOWNORMAL equ 1

EXTERN SetFocus@4:NEAR
EXTERN SendMessageA@16:NEAR
EXTERN MessageBoxA@16:NEAR
EXTERN CreateWindowExA@48:NEAR
EXTERN DefWindowProcA@16:NEAR
EXTERN DispatchMessageA@4:NEAR
EXTERN ExitProcess@4:NEAR
EXTERN GetMessageA@16:NEAR
EXTERN GetModuleHandleA@4:NEAR
EXTERN LoadCursorA@8:NEAR
EXTERN LoadIconA@8:NEAR
EXTERN PostQuitMessage@4:NEAR
EXTERN RegisterClassA@4:NEAR
EXTERN ShowWindow@8:NEAR
EXTERN TranslateMessage@4:NEAR
EXTERN UpdateWindow@4:NEAR

MSGSTRUCT STRUC
	MSHWND DD ?
	MSMESSAGE DD ?
	MSWPARAM DD ?
	MSLPARAM DD ?
	MSTIME DD ?
	MSPT DD ?
MSGSTRUCT ENDS
WNDCLASS STRUC
	CLSSTYLE DD ?
	CLWNDPROC DD ?
	CLSCBCLSEX DD ?
	CLSCBWNDEX DD ?
	CLSHINST DD ?
	CLSHICON DD ?
	CLSHCURSOR DD ?
	CLBKGROUND DD ?
	CLMENNAME DD ?
	CLNAME DD ?
WNDCLASS ENDS

includelib d:\masm32\lib\user32.lib
includelib d:\masm32\lib\kernel32.lib

_DATA SEGMENT
NEWHWND DD 0
MSG MSGSTRUCT <?>
WC WNDCLASS <?>
HINST dword 0
TITLENAME DB 'Example - window with elements of control', 0
CLASSNAME DB 'CLASS32', 0
CPBUT DB 'Exit', 0
CPBUT1 DB 'Add', 0
CPLST DB ' ', 0
CPEDT DB 'Edit window', 0
CLSBUTN DB 'BUTTON', 0
CLSLIST DB 'LISTBOX', 0
CLSEDIT DB 'EDIT', 0
HWNDBTN DWORD 0
HWNDBTN1 DWORD 0
HWNDLST DWORD 0
HWNDEDT DWORD 0
CAP DB 'Message', 0
CAP1 DB 'Vobran', 0
MES DB 'End of work', 0
; массив строк
STR1 DB 'Red', 0
STR2 DB 'Green', 0
STR3 DB 'Blue', 0
STR4 DB 'Yellow', 0
STR5 DB 'Black', 0
STR6 DB 'White', 0
;указатели на строки
PS DWORD OFFSET STR1
DWORD OFFSET STR2
DWORD OFFSET STR3
DWORD OFFSET STR4
DWORD OFFSET STR5
DWORD OFFSET STR6
;BUF DB 30 dup(0)
BUF DB 256 dup(0)
_DATA ENDS

_TEXT SEGMENT
	START:
	PUSH 0
	CALL GetModuleHandleA@4
	MOV HINST, EAX
REG_CLASS:
	MOV WC.CLSSTYLE, STYLE
	MOV WC.CLWNDPROC, OFFSET WNDPROC
	MOV WC.CLSCBCLSEX, 0
	MOV WC.CLSCBWNDEX, 0
	MOV EAX, HINST
	MOV WC.CLSHINST, EAX
	PUSH IDI_APPLICATION
	PUSH 0
	CALL LoadIconA@8
	MOV WC.CLSHICON, EAX
	PUSH IDC_ARROW
	PUSH 0
	CALL LoadCursorA@8
	MOV WC.CLSHCURSOR, EAX
	MOV WC.CLBKGROUND, 17 ;ЦВЕТ ОКНА
	MOV DWORD PTR WC.CLMENNAME, 0
	MOV DWORD PTR WC.CLNAME, OFFSET CLASSNAME
	PUSH OFFSET WC
	CALL RegisterClassA@4
	PUSH 0
	PUSH HINST
	PUSH 0
	PUSH 0
	PUSH 350
	PUSH 400
	PUSH 100
	PUSH 100
	PUSH WS_OVERLAPPEDWINDOW
	PUSH OFFSET TITLENAME
	PUSH OFFSET CLASSNAME
	PUSH 0
	CALL CreateWindowExA@48
	CMP EAX, 0	;место возникновение ошибки 
	JZ _ERR
	MOV NEWHWND, EAX
	PUSH SW_SHOWNORMAL
	PUSH NEWHWND
	CALL ShowWindow@8
	PUSH NEWHWND
	CALL UpdateWindow@4
MSG_LOOP:
	PUSH 0
	PUSH 0
	PUSH 0
	PUSH OFFSET MSG
	CALL GetMessageA@16
	CMP EAX, 0
	JE END_LOOP
	PUSH OFFSET MSG
	CALL TranslateMessage@4
	PUSH OFFSET MSG
	CALL DispatchMessageA@4
	JMP MSG_LOOP
END_LOOP:
	PUSH MSG.MSWPARAM
	CALL ExitProcess@4
_ERR:
	JMP END_LOOP
WNDPROC PROC
	PUSH EBP
	MOV EBP,ESP
	PUSH EBX
	PUSH ESI
	PUSH EDI
	CMP DWORD PTR [EBP+0CH], WM_DESTROY
	JE WMDESTROY
	CMP DWORD PTR [EBP+0CH], WM_CREATE
	JE WMCREATE
	CMP DWORD PTR [EBP+0CH], WM_COMMAND
	JE WMCOMMND
	JMP DEFWNDPROC
WMCOMMND:
 	MOV EAX, HWNDBTN	
	CMP DWORD PTR [EBP+14H], EAX
	JE WMDESTROY
	MOV EAX, HWNDLST
	CMP DWORD PTR [EBP+14H], EAX
	JNE NOLIST
	CMP WORD PTR [EBP+12H], LBN_DBLCLK
	JNE NOLIST
	PUSH 0			
	PUSH 0
	PUSH LB_GETCURSEL
	PUSH HWNDLST
	CALL SendMessageA@16
	PUSH OFFSET BUF
	PUSH EAX
	PUSH LB_GETTEXT
	PUSH HWNDLST
	CALL SendMessageA@16
	PUSH OFFSET BUF
	PUSH 0
	PUSH WM_SETTEXT
	PUSH HWNDEDT
	CALL SendMessageA@16
	PUSH 0
	PUSH OFFSET CAP1
	PUSH OFFSET BUF
	PUSH DWORD PTR [EBP+08H]
	CALL MessageBoxA@16
NOLIST:
	MOV EAX, HWNDBTN1	
	CMP DWORD PTR [EBP+14H], EAX
	JNE NOBTN1
	PUSH OFFSET BUF
	PUSH 30
	PUSH WM_GETTEXT
	PUSH HWNDEDT
	CALL SendMessageA@16
	PUSH OFFSET BUF
	PUSH 0
	PUSH LB_ADDSTRING
	PUSH HWNDLST
	CALL SendMessageA@16
NOBTN1:
	MOV EAX, 0
	JMP FINISH
WMCREATE:
	PUSH 0
	PUSH HINST
	PUSH 0
	PUSH DWORD PTR [EBP+08H]
	PUSH 20
	PUSH 80
	PUSH 10
	PUSH 10
	PUSH STYLBTN
	PUSH OFFSET CPBUT
	PUSH OFFSET CLSBUTN
	PUSH 0
	CALL CreateWindowExA@48
	MOV HWNDBTN, EAX
	PUSH 0
	PUSH HINST
	PUSH 0
	PUSH DWORD PTR [EBP+08H]
	PUSH 20
	PUSH 80
	PUSH 10
	PUSH 100
	PUSH STYLBTN
	PUSH OFFSET CPBUT1
	PUSH OFFSET CLSBUTN
	PUSH 0
	CALL CreateWindowExA@48
	MOV HWNDBTN1, EAX
	PUSH 0
	PUSH HINST
	PUSH DWORD PTR [EBP+08H]
	PUSH 120
	PUSH 250
	PUSH 50
	PUSH 10
	PUSH STYLLST
	PUSH OFFSET CPLST
	PUSH OFFSET CLSLIST
	PUSH 0
	CALL CreateWindowExA@48
	MOV HWNDLST, EAX

	MOV ESI,6        ; Используем ESI как счетчик (ESI сохранен в начале функции)
	LEA EBX,PS
_ADD:
	PUSH DWORD PTR [EBX]
	PUSH 0
	PUSH LB_ADDSTRING
	PUSH HWNDLST
	CALL SendMessageA@16
	ADD EBX,4
	DEC ESI
	JNZ _ADD

;	MOV ECX, 6
;	LEA EBX, PS
;_ADD:
;	PUSH ECX
;	PUSH DWORD PTR [EBX]
;	PUSH 0
;	PUSH LB_ADDSTRING
;	PUSH HWNDLST
;	CALL SendMessageA@16
;	ADD EBX, 4
;	POP ECX
;	LOOP _ADD

	PUSH 0
	PUSH HINST
	PUSH 0
	PUSH DWORD PTR [EBP+08H]
	PUSH 20
	PUSH 250
	PUSH 200
	PUSH 10
	PUSH STYLEDT
	PUSH OFFSET CPEDT
	PUSH OFFSET CLSEDIT
	PUSH 0
	CALL CreateWindowExA@48
	MOV HWNDEDT, EAX
	MOV EAX, 0
	JMP FINISH
DEFWNDPROC:
	PUSH DWORD PTR [EBP+14H]
	PUSH DWORD PTR [EBP+10H]
	PUSH DWORD PTR [EBP+0CH]
	PUSH DWORD PTR [EBP+08H]
	CALL DefWindowProcA@16
	JMP FINISH
WMDESTROY:
	PUSH 0
	PUSH OFFSET CAP
	PUSH OFFSET MES
	PUSH DWORD PTR [EBP+08H]
	CALL MessageBoxA@16
	PUSH 0
	CALL PostQuitMessage@4
	MOV EAX,0
FINISH:
	POP EDI
	POP ESI
	POP EBX
	POP EBP
	RET 16
WNDPROC ENDP
_TEXT ENDS
END START
